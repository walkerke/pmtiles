% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pm_serve.R
\name{pm_serve}
\alias{pm_serve}
\title{Serve PMTiles files via local HTTP server with CORS}
\usage{
pm_serve(path, port = 8080, background = TRUE)
}
\arguments{
\item{path}{Path to a directory containing PMTiles files, or a single PMTiles file.
If a single file, its directory will be served.}

\item{port}{Port number for the HTTP server. Default is 8080.}

\item{background}{Logical. If `TRUE`, runs server in background and returns
immediately. If `FALSE`, blocks until interrupted. Default is `TRUE`.}
}
\value{
If `background = TRUE`, returns a list with:
- `url`: Base URL of the server
- `port`: Port number
- `dir`: Directory being served
- `daemon`: Server daemon ID (for stopping)

If `background = FALSE`, blocks until interrupted and returns nothing.
}
\description{
Start a local HTTP server to serve PMTiles files with CORS headers enabled.
This allows PMTiles to be consumed by web maps (like mapgl) using the
PMTiles.js client library. The server runs in the background and can be
stopped with `pm_stop_server()`.
}
\details{
This function serves the **raw PMTiles files** with CORS headers, allowing
them to be consumed by PMTiles.js in the browser. This works with mapgl's
PMTiles protocol and `pm_view()` for quick visualization.

For a file at `tiles/data.pmtiles`, it will be available at:
`http://localhost:PORT/data.pmtiles`

**File size:** Works well for files up to ~1GB. For larger files, consider
`pm_serve_zxy()` or serving from a Node.js server like http-server.

The server uses httpuv with custom CORS headers and HTTP range request support.
When `background = TRUE`, the server runs as a background daemon.
}
\examples{
\dontrun{
# Serve a single PMTiles file
server <- pm_serve("data.pmtiles", port = 8080)
# File available at: http://localhost:8080/data.pmtiles

# Use in mapgl
mapgl::add_pmtiles_source(url = paste0(server$url, "/data.pmtiles"))

# Serve a directory of PMTiles files
server <- pm_serve("tiles/", port = 8080)

# Stop the server when done
pm_stop_server(server)

# Or run in foreground (blocks)
pm_serve("data.pmtiles", background = FALSE)
}

}
\seealso{
[pm_stop_server()], [pm_view()]
}
