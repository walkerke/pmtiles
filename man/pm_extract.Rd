% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pm_extract.R
\name{pm_extract}
\alias{pm_extract}
\title{Extract a subset from a PMTiles archive}
\usage{
pm_extract(
  input,
  output,
  bbox = NULL,
  region = NULL,
  minzoom = NULL,
  maxzoom = NULL,
  bucket = NULL,
  download_threads = 4,
  overfetch = 0.05,
  dry_run = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{input}{Path to input PMTiles archive (local or remote URL).}

\item{output}{Path for the output PMTiles archive.}

\item{bbox}{Numeric vector of bounding box coordinates in the form
`c(min_lon, min_lat, max_lon, max_lat)`. Mutually exclusive with `region`.}

\item{region}{Path to a GeoJSON file containing a Polygon, MultiPolygon,
Feature, or FeatureCollection defining the area of interest.
Mutually exclusive with `bbox`.}

\item{minzoom}{Minimum zoom level to extract (inclusive). Default is 0.}

\item{maxzoom}{Maximum zoom level to extract (inclusive). If not specified,
extracts all zoom levels from the source.}

\item{bucket}{Optional remote bucket specification if `input` is remote.}

\item{download_threads}{Number of parallel download threads for remote archives.
Default is 4.}

\item{overfetch}{Ratio of extra data to download to minimize number of requests.
For example, 0.05 means 5 percent overfetch. Default is 0.05.}

\item{dry_run}{Logical. If `TRUE`, calculates tiles to extract without
actually downloading them. Default is `FALSE`.}

\item{verbose}{Logical. If `TRUE`, prints progress information. Default is `TRUE`.}
}
\value{
Invisibly returns the path to the output archive.
}
\description{
Create a smaller PMTiles archive from a larger one by extracting a subset
of zoom levels or a geographic region. The source archive can be local or remote.
}
\details{
Extracting a full sub-pyramid from zoom 0 to `maxzoom` is an efficient
operation. However, using a `minzoom` > 0 may require many more requests
and should only be used when necessary.
}
\examples{
\dontrun{
# Extract zoom levels 0-10
pm_extract("large.pmtiles", "subset.pmtiles", maxzoom = 10)

# Extract by bounding box
pm_extract(
  "large.pmtiles",
  "bbox_subset.pmtiles",
  bbox = c(-122.5, 37.7, -122.3, 37.9)
)

# Extract by GeoJSON region
pm_extract(
  "large.pmtiles",
  "region_subset.pmtiles",
  region = "boundary.geojson",
  maxzoom = 12
)

# Extract from remote archive
pm_extract(
  "large.pmtiles",
  "local_copy.pmtiles",
  bucket = "s3://my-bucket",
  maxzoom = 10,
  download_threads = 8
)
}


}
