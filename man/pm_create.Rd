% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pm_create.R
\name{pm_create}
\alias{pm_create}
\title{Create PMTiles or MBTiles from GeoJSON with tippecanoe}
\usage{
pm_create(
  input,
  output,
  layer_name = NULL,
  min_zoom = NULL,
  max_zoom = NULL,
  guess_maxzoom = FALSE,
  smallest_maximum_zoom_guess = NULL,
  base_zoom = NULL,
  extend_zooms_if_still_dropping = FALSE,
  full_detail = NULL,
  low_detail = NULL,
  minimum_detail = NULL,
  extra_detail = NULL,
  exclude = NULL,
  include = NULL,
  exclude_all = FALSE,
  drop_rate = NULL,
  drop_densest_as_needed = FALSE,
  drop_fraction_as_needed = FALSE,
  drop_smallest_as_needed = FALSE,
  drop_lines = FALSE,
  drop_polygons = FALSE,
  coalesce = FALSE,
  coalesce_smallest_as_needed = FALSE,
  coalesce_densest_as_needed = FALSE,
  coalesce_fraction_as_needed = FALSE,
  cluster_distance = NULL,
  cluster_maxzoom = NULL,
  simplification = NULL,
  no_line_simplification = FALSE,
  simplify_only_low_zooms = FALSE,
  no_tiny_polygon_reduction = FALSE,
  detect_shared_borders = FALSE,
  no_simplification_of_shared_nodes = FALSE,
  preserve_input_order = FALSE,
  reorder = FALSE,
  hilbert = FALSE,
  maximum_tile_bytes = NULL,
  maximum_tile_features = NULL,
  no_feature_limit = FALSE,
  no_tile_size_limit = FALSE,
  generate_ids = TRUE,
  calculate_feature_density = FALSE,
  read_parallel = FALSE,
  attribution = NULL,
  description = NULL,
  buffer = NULL,
  other_options = NULL,
  force = TRUE,
  keep_geojson = FALSE,
  quiet = FALSE
)
}
\arguments{
\item{input}{An sf object, or path to a GeoJSON, FlatGeobuf, or CSV file}

\item{output}{Path to output file (.pmtiles or .mbtiles)}

\item{layer_name}{Name for the layer in the tileset. If NULL, derived from
input filename or a random string for sf objects (tippecanoe -l)}

\item{min_zoom}{Minimum zoom level (tippecanoe -Z, default 0)}

\item{max_zoom}{Maximum zoom level (tippecanoe -z, default 14)}

\item{guess_maxzoom}{If TRUE, guess appropriate maxzoom based on feature
density (tippecanoe -zg)}

\item{smallest_maximum_zoom_guess}{Use specified zoom if lower maxzoom is
guessed (tippecanoe --smallest-maximum-zoom-guess)}

\item{base_zoom}{Zoom at and above which all points are included
(tippecanoe -B). If NULL, defaults to maxzoom.}

\item{extend_zooms_if_still_dropping}{Increase maxzoom if features still
being dropped (tippecanoe -ae)}

\item{full_detail}{Detail at max zoom (default 12, for 4096 tile resolution,
tippecanoe -d)}

\item{low_detail}{Detail at lower zooms (default 12, tippecanoe -D)}

\item{minimum_detail}{Minimum detail if tiles too big (default 7,
tippecanoe -m)}

\item{extra_detail}{Generate tiles with extra detail for precision
(tippecanoe --extra-detail)}

\item{exclude}{Character vector of attribute names to exclude (tippecanoe -x)}

\item{include}{Character vector of attribute names to include, excluding all
others (tippecanoe -y)}

\item{exclude_all}{If TRUE, exclude all attributes and encode only geometries
(tippecanoe -X)}

\item{drop_rate}{Rate at which features dropped at zoom levels below basezoom
(default 2.5, tippecanoe -r). Use "g" for auto-guess.}

\item{drop_densest_as_needed}{Reduce feature spacing if tile too large
(tippecanoe -as)}

\item{drop_fraction_as_needed}{Drop fraction of features to keep under size
limit (tippecanoe -ad)}

\item{drop_smallest_as_needed}{Drop smallest features to keep under size
limit (tippecanoe -an)}

\item{drop_lines}{Apply dot-dropping to lines (tippecanoe -al)}

\item{drop_polygons}{Apply dot-dropping to polygons (tippecanoe -ap)}

\item{coalesce}{Coalesce consecutive features with same attributes
(tippecanoe -ac)}

\item{coalesce_smallest_as_needed}{Combine smallest features into nearby ones
(tippecanoe -aN)}

\item{coalesce_densest_as_needed}{Combine densest features into nearby ones
(tippecanoe -aD)}

\item{coalesce_fraction_as_needed}{Combine fraction of features into nearby
ones (tippecanoe -aS)}

\item{cluster_distance}{Cluster points within distance of each other
(tippecanoe -K, max 255)}

\item{cluster_maxzoom}{Max zoom for clustering (tippecanoe -k). Use "g" to
set to maxzoom - 1.}

\item{simplification}{Multiply tolerance for line/polygon simplification
(tippecanoe -S, default ~1)}

\item{no_line_simplification}{Don't simplify lines and polygons
(tippecanoe -ps)}

\item{simplify_only_low_zooms}{Don't simplify at maxzoom (tippecanoe -pS)}

\item{no_tiny_polygon_reduction}{Don't combine tiny polygons into squares
(tippecanoe -pt)}

\item{detect_shared_borders}{Detect and simplify shared polygon borders
identically (tippecanoe -ab)}

\item{no_simplification_of_shared_nodes}{Don't simplify nodes where lines
converge/diverge (tippecanoe -pn)}

\item{preserve_input_order}{Preserve original input order instead of
geographic order (tippecanoe -pi)}

\item{reorder}{Reorder features to put same attributes in sequence
(tippecanoe -ao)}

\item{hilbert}{Use Hilbert Curve order instead of Z-order (tippecanoe -ah)}

\item{maximum_tile_bytes}{Maximum compressed tile size in bytes (default 500K,
tippecanoe -M)}

\item{maximum_tile_features}{Maximum features per tile (default 200,000,
tippecanoe -O)}

\item{no_feature_limit}{Don't limit tiles to 200,000 features
(tippecanoe -pf)}

\item{no_tile_size_limit}{Don't limit tiles to 500K bytes (tippecanoe -pk)}

\item{generate_ids}{Add feature IDs to features without them (tippecanoe -ai)}

\item{calculate_feature_density}{Add tippecanoe_feature_density attribute
(tippecanoe -ag)}

\item{read_parallel}{Use multiple threads for line-delimited GeoJSON
(tippecanoe -P)}

\item{attribution}{Attribution text for tileset (tippecanoe -A)}

\item{description}{Description for tileset (tippecanoe -N)}

\item{buffer}{Buffer size in screen pixels (default 5, tippecanoe -b)}

\item{other_options}{Character vector of additional tippecanoe options not
covered by other parameters. Example: c("-pf", "-pk", "--coalesce")}

\item{force}{If TRUE, overwrite existing output file (default TRUE,
tippecanoe -f)}

\item{keep_geojson}{If TRUE, keep temporary GeoJSON file for sf objects}

\item{quiet}{If TRUE, suppress progress messages (tippecanoe -q)}
}
\value{
Path to output file (invisibly)
}
\description{
Generate vector tiles from GeoJSON, FlatGeobuf, or CSV input using
tippecanoe. This function requires tippecanoe to be installed on your system.
See \url{https://github.com/felt/tippecanoe} for installation instructions.
}
\details{
This function wraps the tippecanoe command-line tool. Tippecanoe must be
installed separately:
\itemize{
  \item macOS: \code{brew install tippecanoe}
  \item Ubuntu: \code{sudo apt-get install tippecanoe}
  \item From source: \url{https://github.com/felt/tippecanoe}
}

The function handles sf objects by converting them to temporary GeoJSON files.
For faster GeoJSON writing with large datasets, install the \code{yyjsonr}
package, which can be significantly faster than the default \code{sf::st_write()}.
}
\section{Zoom Levels}{

}

\section{Tile Resolution}{

}

\section{Filtering Attributes}{

}

\section{Feature Dropping}{

}

\section{Feature Coalescing}{

}

\section{Clustering}{

}

\section{Simplification}{

}

\section{Feature Ordering}{

}

\section{Tile Size Limits}{

}

\section{Other Options}{

}

\examples{
\dontrun{
library(sf)

# Simple usage with sf object
pm_create(
  my_sf_data,
  "output.pmtiles",
  max_zoom = 14
)

# Complex parcel tileset
pm_create(
  "parcels.geojson",
  "parcels.pmtiles",
  layer_name = "parcels",
  min_zoom = 10,
  max_zoom = 18,
  full_detail = 15,
  preserve_input_order = TRUE,
  no_tiny_polygon_reduction = TRUE,
  coalesce_densest_as_needed = TRUE,
  coalesce_fraction_as_needed = TRUE,
  extend_zooms_if_still_dropping = TRUE,
  simplification = 1,
  detect_shared_borders = TRUE,
  other_options = c("-pf", "-pk", "-ai")
)

# Point clustering
pm_create(
  points_sf,
  "points.pmtiles",
  max_zoom = 14,
  cluster_distance = 10,
  cluster_maxzoom = "g",
  generate_ids = TRUE
)

# With attribute filtering
pm_create(
  roads_sf,
  "roads.pmtiles",
  include = c("name", "highway", "surface"),
  drop_densest_as_needed = TRUE,
  simplification = 10
)
}

}
