#!/bin/sh

# Detect architecture
if [ -z "$R_ARCH" ]; then
  # Try to detect from PROCESSOR_ARCHITECTURE or uname
  if [ ! -z "$PROCESSOR_ARCHITECTURE" ]; then
    ARCH="$PROCESSOR_ARCHITECTURE"
  else
    ARCH=$(uname -m)
  fi
else
  # R_ARCH is set (e.g., /x64 or /i386)
  ARCH="$R_ARCH"
fi

# Map to binary architecture
case "$ARCH" in
  *64*|*amd64*|*x86_64*|AMD64)
    BINARCH="amd64"
    ;;
  *arm64*|*aarch64*|ARM64)
    BINARCH="arm64"
    ;;
  *)
    BINARCH="amd64"  # Default to amd64
    ;;
esac

BINARY_DIR="inst/bin/windows_${BINARCH}"
BINARY_PATH="${BINARY_DIR}/pmtiles.exe"

echo "Detected platform: windows_${BINARCH}"

# Check if pre-compiled binary exists
if [ -f "$BINARY_PATH" ]; then
  echo "Using pre-compiled binary for windows_${BINARCH}"
  exit 0
fi

# If no pre-compiled binary, try to build from source
echo "No pre-compiled binary found for windows_${BINARCH}"

if ! command -v go >/dev/null 2>&1; then
  echo "***********************************************************************"
  echo "Go is not found on your system."
  echo "Pre-compiled binaries are not available for windows_${BINARCH}."
  echo "Please install Go (>= 1.19) to build from source."
  echo "Visit https://golang.org/doc/install for installation instructions."
  echo "***********************************************************************"
  exit 1
fi

# Build from source
echo "Building pmtiles binary from source..."
cd inst/go-pmtiles || exit 1

# Create binary directory
mkdir -p "../${BINARY_DIR}"

# Build for Windows
GOOS=windows GOARCH="${BINARCH}" go build -ldflags="-s -w" -o "../../${BINARY_PATH}" main.go

if [ $? -eq 0 ]; then
  echo "Successfully built pmtiles binary from source"
else
  echo "***********************************************************************"
  echo "Failed to build pmtiles binary from source"
  echo "***********************************************************************"
  exit 1
fi

cd ../..

echo "Configuration successful"
exit 0
